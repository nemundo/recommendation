<?php


namespace Nemundo\Content\Index\Tree\Reader;


use Nemundo\Content\Index\Tree\Data\Tree\TreeReader;
use Nemundo\Content\Row\ContentCustomRow;
use Nemundo\Core\Base\DataSource\AbstractDataSource;


class ParentContentReader extends AbstractDataSource
{

    public $treeId;


    protected function loadData()
    {


        $this->getParent($this->treeId);


        /*
        $reader = new TreeReader();
        $reader->model->loadParent();
        $reader->model->parent->loadContentType();
        $reader->filter->andEqual($reader->model->childId, $this->contentType->getContentId());
        foreach ($reader->getData() as $treeRow) {

//            $this->addItem($treeRow->parent->getContentType());

            /*
            //$list[] = $treeRow->parent->getContentType();*/

        /*   $this->getParent($treeRow->parentId);



       }


       /*
       $list=[];
       $list=$this->getParent($this->contentType->getContentId());
       */

        //foreach ($contentType->getParentParentContentTypeList() as $parent) {

        /*     $site = clone($this->redirectSite);
             $site->title = $parent->getSubject();
             $site->addParameter(new ContentParameter($parent->getContentId()));
             $this->addSite($site);

             /*$site = clone($this->redirectSite);
             $site->title = $contentType->getSubject();
             $site->addParameter(new ContentParameter($contentType->getContentId()));
             $this->addSite($site);*/

        //}


        // TODO: Implement loadData() method.
    }


    private function getParent($treeId)
    {


        $reader = new TreeReader();
        $reader->model->loadChild();
        $reader->model->loadParent();
        $treeRow = $reader->getRowById($treeId);

        $this->addItem($treeRow->child);  //parent);
        $this->addItem($treeRow->parent);  //parent);





        /*
        $reader = new TreeReader();
        $reader->model->loadParent();
        $reader->model->parent->loadContentType();
        $reader->filter->andEqual($reader->model->childId, $treeRow->parentId);
        foreach ($reader->getData() as $treeRow) {
//            $list[] = $treeRow->parent->getContentType();

       //     $this->getParent($treeRow->id);  //,$list);
            //$this->addItem($treeRow->parent->getContentType());

        }*/



    }


    /**
     * @return ContentCustomRow[]
     */
    public function getData()
    {
        return parent::getData(); // TODO: Change the autogenerated stub
    }


}