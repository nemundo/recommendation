<?php


namespace Nemundo\Content\Index\Tree\Com\Container;


use Nemundo\Blog\Site\Admin\BlogContentSite;
use Nemundo\Content\Admin\Site\ContentNewSite;
use Nemundo\Content\App\Explorer\Site\NewSite;
use Nemundo\Content\Com\Base\ContentTypeRedirectTrait;
use Nemundo\Content\Com\Container\ContentTypeSubmenuAddContainer;
use Nemundo\Content\Com\Dropdown\ContentTypeCollectionSubmenuDropdown;
use Nemundo\Content\Index\Tree\Type\AbstractTreeContentType;
use Nemundo\Content\Index\Tree\Type\TreeIndexTrait;
use Nemundo\Content\Parameter\ContentParameter;
use Nemundo\Content\View\AbstractContentAdmin;
use Nemundo\Html\Container\AbstractContainer;

class TreeAdminContainer extends AbstractContentAdmin  //Container
{


    use ContentTypeRedirectTrait;

    /**
     * @var AbstractTreeContentType
     */
    //public $contentType;

    public function getContent()
    {

        //if ($thiscontentType->isObjectOfTrait(TreeIndexTrait::class)) {

            if ($this->contentType->allowChild) {

                if ($this->contentType->restrictedChild) {

                    $dropdown = new ContentTypeCollectionSubmenuDropdown($this);
                    $dropdown->redirectSite = clone(BlogContentSite::$site);  // clone(ContentNewSite::$site);   // clone(ItemNewSite::$site);
                    $dropdown->redirectSite->addParameter(new ContentParameter($this->contentType->getContentId()));
                    foreach ($this->contentType->getRestrictedChildContentType() as $child) {
                        $dropdown->addContentType($child);
                    }

                } else {

                    $container = new ContentTypeSubmenuAddContainer($this);
                    $container->parentId = $this->contentType->getContentId();
                    $container->redirectSite = clone(NewSite::$site);
                    $container->redirectSite->addParameter(new ContentParameter());

                }

            }


        $container = new SortableContentContainer($this);
        $container->contentType = $this->contentType;
        $container->showViewIcon=false;



        //}

        return parent::getContent(); // TODO: Change the autogenerated stub
    }






}