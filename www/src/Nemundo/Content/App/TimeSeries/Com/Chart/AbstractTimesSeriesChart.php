<?php


namespace Nemundo\Content\App\TimeSeries\Com\Chart;


use Nemundo\Com\Chart\Data\LineChartData;
use Nemundo\Content\App\TimeSeries\Base\ValueTrait;
use Nemundo\Content\App\TimeSeries\Data\Line\LineReader;
use Nemundo\Content\App\TimeSeries\Data\TimeSeriesData\TimeSeriesDataReader;
use Nemundo\Content\App\TimeSeries\Type\PeriodType\AbstractPeriodType;
use Nemundo\Content\App\TimeSeries\Type\PeriodType\DayPeriodType;
use Nemundo\Content\App\TimeSeries\Type\PeriodType\MonthPeriodType;
use Nemundo\Content\App\TimeSeries\Type\PeriodType\MonthSeasonPeriodType;
use Nemundo\Content\App\TimeSeries\Type\PeriodType\WeekPeriodType;
use Nemundo\Content\App\TimeSeries\Type\PeriodType\WeekSeasonPeriodType;
use Nemundo\Content\App\TimeSeries\Type\PeriodType\YearPeriodType;
use Nemundo\Core\Type\DateTime\Date;
use Nemundo\Db\Filter\Filter;
use Nemundo\Package\Echarts\Chart\AbstractEchart;

abstract class AbstractTimesSeriesChart extends AbstractEchart
{

    use ValueTrait;


    private $lineIdList = [];

    public function addLineId($lineId)
    {
        $this->lineIdList[] = $lineId;
        return $this;
    }


    public function getLineList() {
        return $this->lineIdList;
    }



    protected function getLineReader() {

        $lineReader = new LineReader();

        $filter = new Filter();
        foreach ($this->lineIdList as $lineId) {
            $filter->orEqual($lineReader->model->id, $lineId);
        }
        $lineReader->filter->andFilter($filter);

        return $lineReader;

    }



    /*
    public function getContent()
    {


        /*
        $lineCount = 0;

        $lineReader = new LineReader();
        $lineReader->filter->andEqual($lineReader->model->timeSeriesId, $this->timeSeriesId);
        foreach ($lineReader->getData() as $lineRow) {

            $chartLine = new LineChartData($this);
            $chartLine->legend = $lineRow->line;

            $timeSeriesPeriodTypeReader = new TimeSeriesDataReader();
            $timeSeriesPeriodTypeReader->model->loadPeriod();
            $timeSeriesPeriodTypeReader->filter->andEqual($timeSeriesPeriodTypeReader->model->lineId,$lineRow->id);
            $timeSeriesPeriodTypeReader->filter->andEqual($timeSeriesPeriodTypeReader->model->period->periodTypeId, $this->periodType->id);

            if ($this->periodType->id == (new DatePeriodType())->id) {
                $timeSeriesPeriodTypeReader->addOrder($timeSeriesPeriodTypeReader->model->period->date);
            }

            if ($this->periodType->id == (new WeekPeriodType())->id) {
                $timeSeriesPeriodTypeReader->addOrder($timeSeriesPeriodTypeReader->model->period->year);
                $timeSeriesPeriodTypeReader->addOrder($timeSeriesPeriodTypeReader->model->period->week);
            }

            if ($this->periodType->id == (new MonthPeriodType())->id) {
                $timeSeriesPeriodTypeReader->addOrder($timeSeriesPeriodTypeReader->model->period->year);
                $timeSeriesPeriodTypeReader->addOrder($timeSeriesPeriodTypeReader->model->period->month);
            }

            if ($this->periodType->id == (new YearPeriodType())->id) {
                $timeSeriesPeriodTypeReader->addOrder($timeSeriesPeriodTypeReader->model->period->year);
            }

            foreach ($timeSeriesPeriodTypeReader->getData() as $dataRow) {

                //$chartLine->addValue($dataRow->value);

                $this->onDataRow();


                if ($lineCount == 0) {

                    if ($this->periodType->id == (new DatePeriodType())->id) {
                        $this->addXAxisLabel($dataRow->period->date->getIsoDateFormat());
                    }

                    if ($this->periodType->id == (new WeekPeriodType())->id) {
                        $this->addXAxisLabel($dataRow->period->getWeekYear());
                    }

                    if ($this->periodType->id == (new MonthPeriodType())->id) {
                        $this->addXAxisLabel($dataRow->period->getMonthYear());
                    }

                    if ($this->periodType->id == (new YearPeriodType())->id) {
                        $this->addXAxisLabel($dataRow->period->year);
                    }

                    if ($this->periodType->id == (new WeekSeasonPeriodType())->id) {
                        $this->addXAxisLabel($dataRow->period->week);
                    }

                    if ($this->periodType->id == (new MonthSeasonPeriodType())->id) {
                        $this->addXAxisLabel($dataRow->period->month);
                    }

                }

            }

            $lineCount++;

        }*/

/*

        return parent::getContent(); // TODO: Change the autogenerated stub
    }*/

}