<?php

namespace Nemundo\Content\App\Translation\Content\TranslationText;


use Nemundo\Content\App\Translation\Content\Language\LanguageContentType;
use Nemundo\Content\App\Translation\Data\TextTranslation\TextTranslation;
use Nemundo\Content\App\Translation\Data\TextTranslation\TextTranslationCount;
use Nemundo\Content\App\Translation\Data\TextTranslation\TextTranslationDelete;
use Nemundo\Content\App\Translation\Data\TextTranslation\TextTranslationUpdate;
use Nemundo\Content\App\Translation\Data\Translation\Translation;
use Nemundo\Content\App\Translation\Data\Translation\TranslationDelete;
use Nemundo\Content\App\Translation\Language\DefaultLanguage;
use Nemundo\Content\Type\AbstractContentType;
use Nemundo\Core\Debug\Debug;

// TextTranslation
// TranslationContentType
class TranslationTextContentType extends AbstractContentType
{

    /**
     * @var string[]
     */
    public $text;


    protected function loadContentType()
    {
        $this->typeLabel = 'TranslationText';
        $this->typeId = 'e7babef0-8e11-40d3-9917-32547bc6a547';
        $this->formClassList[] = TranslationTextContentForm::class;
        $this->viewClassList[] = TranslationTextContentView::class;
        $this->formPartClass = TranslationTextContentFormPart::class;
    }

    protected function onCreate()
    {

        $data = new Translation();
        $data->active = true;
        // type text or large_text


        $this->dataId = $data->save();


        foreach ((new LanguageContentType())->getDataReader() as $languageRow) {

            if (isset($this->text[$languageRow->code])) {

                $data = new TextTranslation();
                $data->languageId = $languageRow->id;
                $data->translationId = $this->dataId;
                $data->text = $this->text[$languageRow->code];
                $data->save();

            }

        }

    }


    protected function onUpdate()
    {


        foreach ((new LanguageContentType())->getDataReader() as $languageRow) {

            if (isset($this->text[$languageRow->code])) {

                $count = new TextTranslationCount();
                $count->filter->andEqual($count->model->languageId, $languageRow->id);
                $count->filter->andEqual($count->model->translationId, $this->dataId);
                if ($count->getCount() == 0) {

                    $data = new TextTranslation();
                    $data->languageId = $languageRow->id;
                    $data->translationId = $this->dataId;
                    $data->text = $this->text[$languageRow->code];
                    $data->save();

                } else {

                    $update = new TextTranslationUpdate();
                    $update->filter->andEqual($update->model->languageId, $languageRow->id);
                    $update->filter->andEqual($update->model->translationId, $this->dataId);
                    $update->text = $this->text[$languageRow->code];
                    $update->update();

                }

                //(new Debug())->write('update');

            }

        }


    }


    protected function onDelete()
    {

        $delete = new TextTranslationDelete();
        $delete->filter->andEqual($delete->model->translationId,$this->getDataId());
        $delete->delete();

        (new TranslationDelete())->deleteById($this->getDataId());

    }


    public function getSubject()
    {

        $subject=$this->getTranslationText((new DefaultLanguage())->getId());
        return $subject;

    }


    public function getText()
    {

        (new Debug())->write('not allowed');

     //   return parent::getText(); // TODO: Change the autogenerated stub
    }


    public function getTranslationText($languageId)
    {


        $text = '';

        $translationReader = new \Nemundo\Content\App\Translation\Data\TextTranslation\TextTranslationReader();
        $translationReader->filter->andEqual($translationReader->model->translationId, $this->getDataId());
        $translationReader->filter->andEqual($translationReader->model->languageId, $languageId);
        foreach ($translationReader->getData() as $translationRow) {
            $text = $translationRow->text;
        }

        return $text;

    }


    public function getSessionText()
    {


    }


    public function getLargeText()
    {


    }


}