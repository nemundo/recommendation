<?php


namespace Nemundo\Content\App\Share\Action\PrivateShare;


use Nemundo\Content\App\Share\Data\PrivateShare\PrivateShare;
use Nemundo\Content\App\Share\Site\PrivateShareRedirectSite;
use Nemundo\Content\Builder\ContentBuilder;
use Nemundo\Content\Form\AbstractContentForm;
use Nemundo\Content\Parameter\ContentParameter;
use Nemundo\Core\Type\Text\Text;
use Nemundo\Core\Validation\ValidationType;
use Nemundo\Package\Bootstrap\FormElement\BootstrapHtmlEditor;
use Nemundo\Package\Bootstrap\FormElement\BootstrapTextBox;
use Nemundo\Package\ResponsiveMail\ResponsiveActionMailMessage;
use Nemundo\User\Builder\UserBuilder;
use Nemundo\User\Data\User\UserCount;
use Nemundo\User\Parameter\SecureTokenParameter;
use Nemundo\User\Type\UserType;

class PrivateShareActionForm extends AbstractContentForm
{

    /**
     * @var PrivateShareAction
     */
    public $contentType;

    /**
     * @var BootstrapTextBox
     */
    private $email;

    /**
     * @var BootstrapHtmlEditor
     */
    private $message;


    public function getContent()
    {

        $this->email = new BootstrapTextBox($this);
        $this->email->label = 'eMail';
        $this->email->validation = true;
        $this->email->validationType = ValidationType::IS_EMAIL;

        //$this->email->value='test@test.com';

        $this->message = new BootstrapHtmlEditor($this);
        $this->message->label = 'Message';

        // message

        //view


        return parent::getContent(); // TODO: Change the autogenerated stub
    }


    protected function onSubmit()
    {

        $email = (new Text($this->email->getValue()))->changeToLowercase()->getValue();

        $count = new UserCount();
        $count->filter->andEqual($count->model->login, $email);
        if ($count->getCount() == 0) {

            $builder = new UserBuilder();
            $builder->login = $email;
            $builder->email = $email;
            $builder->createUser();

            //$builder->addUsergroup()

            /*
            $userProfile = new UserProfileContentType();
            $userProfile->email = $this->email;
            $userProfile->sendEmail=false;
            $userProfile->saveType();*/

        }

        $userId = (new UserType())->fromLogin($email)->getUserId();
        $secureToken = (new UserType())->fromLogin($email)->getUserRow()->secureToken;
        $message = $this->message->getValue();

        $data = new PrivateShare();
        $data->userId = $userId;
        $data->contentId = $this->contentType->actionContentId;
        $data->message = $message;
        $data->save();

        $mail = new ResponsiveActionMailMessage();
        $mail->mailTo = $email;
        $mail->subject = (new ContentBuilder())->getContent($this->contentType->actionContentId)->getSubject();
        $mail->actionText = $message;
        $mail->actionUrlSite = clone(PrivateShareRedirectSite::$site);
        $mail->actionUrlSite->addParameter(new ContentParameter($this->contentType->actionContentId));
        $mail->actionUrlSite->addParameter(new SecureTokenParameter($secureToken));
        $mail->sendMail();


    }

}