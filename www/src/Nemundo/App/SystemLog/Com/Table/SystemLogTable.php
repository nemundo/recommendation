<?php


namespace Nemundo\App\SystemLog\Com\Table;


use Nemundo\Admin\Com\Table\AdminTable;
use Nemundo\Admin\Com\Table\AdminTableHeader;
use Nemundo\App\Application\Com\Container\AbstractApplicationFilterContainer;
use Nemundo\App\SystemLog\Data\Log\LogPaginationReader;
use Nemundo\Com\TableBuilder\TableRow;
use Nemundo\Db\Sql\Order\SortOrder;
use Nemundo\Html\Container\AbstractContainer;
use Nemundo\Package\Bootstrap\Pagination\BootstrapPagination;

class SystemLogTable extends AbstractApplicationFilterContainer
{

    public function getContent()
    {

        $table = new AdminTable($this);

        $header = new AdminTableHeader($table);
        $header->addText('Application');
        $header->addText('Log Type');
        $header->addText('Message');
        $header->addText('Date/Time');

        $reader = new LogPaginationReader();
        $reader->model->loadApplication();
        $reader->model->loadLogType();
        $reader->paginationLimit = 50;

        //$applicationId = $applicationListBox->getValue();
        if ($this->applicationId!==null) {
            $reader->filter->andEqual($reader->model->applicationId, $this->applicationId);
        }

        /*$logTypeId = $typeListbox->getValue();
        if ($logTypeId) {
            $reader->filter->andEqual($reader->model->logTypeId, $logTypeId);
        }*/

        $reader->addOrder($reader->model->dateTime, SortOrder::DESCENDING);

        foreach ($reader->getData() as $logRow) {

            $row = new TableRow($table);
            $row->addText($logRow->application->application);
            $row->addText($logRow->logType->logType);
            $row->addText($logRow->message);
            $row->addText($logRow->dateTime->getShortDateTimeLeadingZeroFormat());

        }

        $pagination = new BootstrapPagination($this);
        $pagination->paginationReader = $reader;

        return parent::getContent(); // TODO: Change the autogenerated stub
    }

}